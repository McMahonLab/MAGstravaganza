Goal: identify pathways in our metagenome assembled genomes (MAGS) that are more frequently found together than separately, or vice versa
Approach: Identify pathways using Metapathways/Pathways Tools, then write R script to calculate correlations.

I will run Metapathways using Josh's protocol, found here: https://github.com/McMahonLab/Scripts/blob/master/MetaPathways/MetaPathwaysProtocol.md
1. Run Metapathways on the server

Before running Metapathways, I had to copy all of the MAG .fna files to the input folder.
I also needed to modify the names from all numbers to starting with an alphabetic character, per Metapathways requirements.
I accomplished this by running the following code from the /data_lakes/refMAGS_SAGs folder:

```
for file in */??????????.fna; do newfile=$(basename "$file"); cp $file /shared_software/metapathways2-2.5.2/input/m$newfile; done
```

Note: Metapathways must be run on all of the contigs, not just the open reading frames in *.genes.fna

I started running Metapathways, but Josh then alerted me to an error in how Metapathways deals with unknown bases.
It splits at each unknown base, and keeps only the longest part of the contig remaining. Clearly this is not helpful for our purposes.

Josh wrote a script to perform the pre-processing step called "01PreProcessing.py" in input/debug. It must be run from the debug folder, and will populate the metapathways2-2.5.2/output folder with pre-processed files.
It will also write a file to /input called "bad_genomes.txt" which lists the genomes for which the alternative pre-processing was necessary.

I re-started Metapathways, this time turning off the original pre-processing in the config/param_server.txt file.
This took 7 days to run on our 273 MAGs. Not bad!

2. Build PGDBs on my desktop

All of the following was run in my virtual Bio-Linux8 environment.

The contents of the input and output folders from the server were downloaded into /home/manager/Desktop/metapathways2-2.5

Note: Because the updates in metapathways2-2.5.2 vs 2-2.5 increase the speed of some of the previous steps and had no updates in the database building step I'm running here, I chose not to update my software at this time.

However, while trying to run part 2 of Josh's protocol on my desktop, I found that the annotation step had not been completed on the server because pre-processed .txt files had the extension .text
I consulted with Josh and he fixed the bug. In the meantime, I changed all of the .text files in /output on the server to .txt with the following command:

```
find /shared_software/metapathways2-2.5.2/output/* -n -ne "*.text" -exec bash -c 'mv "$1" "$(sed "s/1.text$/.txt/" <<< $"1")"'-'{}\;
```

I then restarted Metapathways on the server, but only running the annotation step using parameter file config/param_server_Alex09May16.txt
This ran for 1.5 days.

After the annotation finished, I downloaded the new annotation files to my virtual linux desktop and proceeded to the pathway database building step.
All went smoothly, except for Windows 10 deciding to update and restart mid-run. I restarted the script in the morning. This ran for 2 days.

3. Extract pathway information.

Using the perl script extract_pathway_table_from_pgdb.perl (https://github.com/hallamlab/mp_tutorial/wiki/Pathway-Analysis), I created tables of the pathways in each MAG.
The two tables I created were:

Pathway coverage (from the output folder):
perl ../extract_pathway_table_from_pgdb.pl -files * -out allMAGS_pathwaycoverage.txt -t lookup

Pathways, reactions, and ORFs (from the output folder):
perl ../extract_pathway_table_from_pgdb.pl -files * -out MAGS_pws_rxns_orfs.txt -t long

Because my virtual machine is limited in to 8G RAM, it would crash whenever it reached that amount.
To avoid this, I split each script into 3 runs by moving finished PGDBs to the long-terms storage folder on the virtual desktop "allMAGS_PGDBS" whenever the machine crashed and appending a number to each output.
I then used "cat" to concatenate the numbered files into their final versions:
combined_MAGS_pathwayscoverage.txt
combined_MAGS_pws_rxns_orfs.txt

Josh also provided me with a metadata file for the genomes that has their genome size, completeness, and short-hand name (for example, TH0111 instead of the IMG OID I've been using)
This file was obtained from our online SQL sample database, with the following command:

SELECT Genome_Name,Genome_Size,Est_Completeness,IMG_Genome_ID FROM genome_book WHERE Type='MAG'

and is named:
MAG_metadata.csv

At this point, the final output files were moved to my real desktop via Dropbox, and the GitHub repo "MAGstravaganza" was initiatied.
