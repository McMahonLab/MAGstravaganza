TE.long$Taxonomy <- phylum[match(TE.long$variable, metadata$IMG_OID)]
TE.long$Taxonomy[which(TE.long$Taxonomy == "[Blank]")] <- "Unclassified"
TE.long <- TE.long[which(is.na(TE.long$Pathways) == F), ]
TE.agg <- aggregate(value ~ Pathways + Taxonomy, TE.long, mean)
# Chlorobi has homologs for these pathways, but likely not the actual pathways
# The RuBisCO homolog is not involved in CBB based on other isolates
# The dissimilatory sulfate reductase works in reverse to run photosynthesis in Chlorobi
TE.agg$value[which(TE.agg$Pathways == "Calvin Cycle" & TE.agg$Taxonomy == "Chlorobi")] <- 0
TE.agg$value[which(TE.agg$Pathways == "Dissimilatory sulfate reduction" & TE.agg$Taxonomy == "Chlorobi")] <- 0
TE.heatmap <- ggplot(data = TE.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#a6cee3", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.67)
TH.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Trout Bog Hypolimnion")])) == F)]
TH.MAGs$Pathways <- make.unique(table$Pathway)
TH.long <- melt(TH.MAGs)
TH.long$Pathways <- factor(TH.long$Pathways, levels = table$Pathway)
TH.long$variable <- factor(TH.long$variable, levels = colnames(table))
TH.long$Taxonomy <- phylum[match(TH.long$variable, metadata$IMG_OID)]
TH.long$Taxonomy[which(TH.long$Taxonomy == "[Blank]")] <- "Unclassified"
TH.long <- TH.long[which(is.na(TH.long$Pathways) == F), ]
TH.agg <- aggregate(value ~ Pathways + Taxonomy, TH.long, mean)
TH.agg$value[which(TH.agg$Pathways == "Dissimilatory sulfate reduction" & TH.agg$Taxonomy == "Chlorobi")] <- 0
TH.agg$value[which(TH.agg$Pathways == "Calvin Cycle" & TH.agg$Taxonomy == "Chlorobi")] <- 0
TH.heatmap <- ggplot(data = TH.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#8856a7", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
TH.heatmap
table <- read.csv("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Pathway_analysis/consolidated_pathway_data.csv", header = T)
metadata <- read.csv("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Supplemental/MAG_information.csv")
#make a long format table - for each phylum and lake, count how many times each pathway appears.
phylum <- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 1)
class<- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 2)
order <- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 3)
colnames(table) <- gsub("X", "", colnames(table))
table <- table[1:61,]
for(i in 3:dim(table)[2]){
column <- table[,i]
column[which(is.na(column) == T)] <- 0
table[,i] <- column
}
# reductive TCA vs regular TCA is distinguished by a single gene - remove partial pathways here
rTCA <- table[2,3:196]
rTCA[which(rTCA < 100)] <- 0
table[2,3:196] <- rTCA
# Not distinguishing between different nitrogenase types - that's a separate paper!
table$Pathway <- gsub("(*)", "", table$Pathway)
table <- table[which(table$Pathway != "Nitrogen fixation, Fe-only"), ]
table$Pathway[which(table$Pathway == "Nitrogen fixation, Mo-Fe")] <- "Nitrogen fixation"
ME.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Mendota")])) == F)]
ME.MAGs$Pathways <- make.unique(table$Pathway)
# Convert to long format for plotting
ME.long <- melt(ME.MAGs)
ME.long$Pathways <- factor(ME.long$Pathways, levels = table$Pathway)
ME.long$variable <- factor(ME.long$variable, levels = colnames(table))
ME.long$Taxonomy <- phylum[match(ME.long$variable, metadata$IMG_OID)]
ME.long$Taxonomy[which(ME.long$Taxonomy == "[Blank]")] <- "Unclassified"
ME.long <- ME.long[which(is.na(ME.long$Pathways) == F), ]
ME.agg <- aggregate(value ~ Pathways + Taxonomy, ME.long, mean)
ME.heatmap <- ggplot(data = ME.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#b2df8a", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
ME.heatmap
ggplot(data = ME.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#b2df8a", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10, color = "#b2df8a"))
ggplot(data = ME.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#b2df8a", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10), axis.text.x = element_text(color = "#b2df8a"))
ggplot(data = ME.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#b2df8a", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, color = "#b2df8a"), axis.text.y = element_text(size = 10))
head(ME.agg)
head(ME.long)
table(ME.long$Taxonomy)
table(phylum[which(metadata$Lake == "Mendota")])
table <- read.csv("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Pathway_analysis/consolidated_pathway_data.csv", header = T)
metadata <- read.csv("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Supplemental/MAG_information.csv")
#make a long format table - for each phylum and lake, count how many times each pathway appears.
phylum <- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 1)
class<- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 2)
order <- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 3)
colnames(table) <- gsub("X", "", colnames(table))
table <- table[1:61,]
for(i in 3:dim(table)[2]){
column <- table[,i]
column[which(is.na(column) == T)] <- 0
table[,i] <- column
}
# reductive TCA vs regular TCA is distinguished by a single gene - remove partial pathways here
rTCA <- table[2,3:196]
rTCA[which(rTCA < 100)] <- 0
table[2,3:196] <- rTCA
# Not distinguishing between different nitrogenase types - that's a separate paper!
table$Pathway <- gsub("(*)", "", table$Pathway)
table <- table[which(table$Pathway != "Nitrogen fixation, Fe-only"), ]
table$Pathway[which(table$Pathway == "Nitrogen fixation, Mo-Fe")] <- "Nitrogen fixation"
ME.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Mendota")])) == F)]
ME.MAGs$Pathways <- make.unique(table$Pathway)
# Convert to long format for plotting
ME.long <- melt(ME.MAGs)
ME.long$Pathways <- factor(ME.long$Pathways, levels = table$Pathway)
ME.long$variable <- factor(ME.long$variable, levels = colnames(table))
ME.long$Taxonomy <- phylum[match(ME.long$variable, metadata$IMG_OID)]
ME.long$Taxonomy[which(ME.long$Taxonomy == "[Blank]")] <- "Unclassified"
ME.long <- ME.long[which(is.na(ME.long$Pathways) == F), ]
ME.agg <- aggregate(value ~ Pathways + Taxonomy, ME.long, mean)
ME.heatmap <- ggplot(data = ME.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#b2df8a", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/ME.heatmap.pdf", ME.heatmap, base_height = 7.5, base_aspect_ratio = 0.75)
TE.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Trout Bog Epilimnion")])) == F)]
TE.MAGs$Pathways <- make.unique(table$Pathway)
TE.long <- melt(TE.MAGs)
TE.long$Pathways <- factor(TE.long$Pathways, levels = table$Pathway)
TE.long$variable <- factor(TE.long$variable, levels = colnames(table))
TE.long$Taxonomy <- phylum[match(TE.long$variable, metadata$IMG_OID)]
TE.long$Taxonomy[which(TE.long$Taxonomy == "[Blank]")] <- "Unclassified"
TE.long <- TE.long[which(is.na(TE.long$Pathways) == F), ]
TE.agg <- aggregate(value ~ Pathways + Taxonomy, TE.long, mean)
# Chlorobi has homologs for these pathways, but likely not the actual pathways
# The RuBisCO homolog is not involved in CBB based on other isolates
# The dissimilatory sulfate reductase works in reverse to run photosynthesis in Chlorobi
TE.agg$value[which(TE.agg$Pathways == "Calvin Cycle" & TE.agg$Taxonomy == "Chlorobi")] <- 0
TE.agg$value[which(TE.agg$Pathways == "Dissimilatory sulfate reduction" & TE.agg$Taxonomy == "Chlorobi")] <- 0
TE.heatmap <- ggplot(data = TE.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#a6cee3", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.67)
TH.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Trout Bog Hypolimnion")])) == F)]
TH.MAGs$Pathways <- make.unique(table$Pathway)
TH.long <- melt(TH.MAGs)
TH.long$Pathways <- factor(TH.long$Pathways, levels = table$Pathway)
TH.long$variable <- factor(TH.long$variable, levels = colnames(table))
TH.long$Taxonomy <- phylum[match(TH.long$variable, metadata$IMG_OID)]
TH.long$Taxonomy[which(TH.long$Taxonomy == "[Blank]")] <- "Unclassified"
TH.long <- TH.long[which(is.na(TH.long$Pathways) == F), ]
TH.agg <- aggregate(value ~ Pathways + Taxonomy, TH.long, mean)
TH.agg$value[which(TH.agg$Pathways == "Dissimilatory sulfate reduction" & TH.agg$Taxonomy == "Chlorobi")] <- 0
TH.agg$value[which(TH.agg$Pathways == "Calvin Cycle" & TH.agg$Taxonomy == "Chlorobi")] <- 0
TH.heatmap <- ggplot(data = TH.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#8856a7", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TH.heatmap.pdf", TH.heatmap, base_height = 7.5, base_aspect_ratio = .73)
table(phylum[metadata$Lake == "Mendota"])
head(ME.agg)
#make a long format table - for each phylum and lake, count how many times each pathway appears.
metadata$Taxonomy <- gsub("Proteobacteria;", "", metadata$Taxonomy)
phylum <- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 1)
class<- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 2)
order <- sapply(strsplit(as.character(metadata$Taxonomy),";"), `[`, 3)
colnames(table) <- gsub("X", "", colnames(table))
table <- table[1:61,]
for(i in 3:dim(table)[2]){
column <- table[,i]
column[which(is.na(column) == T)] <- 0
table[,i] <- column
}
# reductive TCA vs regular TCA is distinguished by a single gene - remove partial pathways here
rTCA <- table[2,3:196]
rTCA[which(rTCA < 100)] <- 0
table[2,3:196] <- rTCA
# Not distinguishing between different nitrogenase types - that's a separate paper!
table$Pathway <- gsub("(*)", "", table$Pathway)
table <- table[which(table$Pathway != "Nitrogen fixation, Fe-only"), ]
table$Pathway[which(table$Pathway == "Nitrogen fixation, Mo-Fe")] <- "Nitrogen fixation"
ME.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Mendota")])) == F)]
ME.MAGs$Pathways <- make.unique(table$Pathway)
# Convert to long format for plotting
ME.long <- melt(ME.MAGs)
ME.long$Pathways <- factor(ME.long$Pathways, levels = table$Pathway)
ME.long$variable <- factor(ME.long$variable, levels = colnames(table))
ME.long$Taxonomy <- phylum[match(ME.long$variable, metadata$IMG_OID)]
ME.long$Taxonomy[which(ME.long$Taxonomy == "[Blank]")] <- "Unclassified"
ME.long <- ME.long[which(is.na(ME.long$Pathways) == F), ]
ME.agg <- aggregate(value ~ Pathways + Taxonomy, ME.long, mean)
table(phylum[metadata$Lake == "Mendota"])
ME.agg$Taxonomy <- gsub("Actinobacteria", "Actinobacteria (17)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Unclassified", "Unclassified (4)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Bacteroidetes", "Bacteroidetes (32)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Chlamydiae", "Chlamydiae (1)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Cyanobacteria", "Cyanobacteria (11)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Planctomycetes", "Planctomycetes (12)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Alphaproteobacteria", "Alphaproteobacteria (1)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Betaproteobacteria", "Betaproteobacteria (7)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Deltaproteobacteria", "Deltaproteobacteria (1)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Gammaproteobacteria", "Gammaproteobacteria (2)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Tenericutes", "Tenericutes (2)", ME.agg$Taxonomy)
ME.agg$Taxonomy <- gsub("Verrucomicrobia", "Verrucomicrobia (8)", ME.agg$Taxonomy)
ME.heatmap <- ggplot(data = ME.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#b2df8a", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/ME.heatmap.pdf", ME.heatmap, base_height = 7.5, base_aspect_ratio = 0.75)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/ME.heatmap.pdf", ME.heatmap, base_height = 8, base_aspect_ratio = 0.7)
table(phylum)[which(metadata$Lake == "Trout")]
table(phylum)[which(metadata$Lake == "TroutBog")]
table(phylum)[which(metadata$Lake == "Trout Bog")]
metadata$Lake
table(phylum)[which(metadata$Lake == "Trout Bog Epilimnion")]
which(metadata$Lake == "Trout Bog Epilimnion")
table(phylum[which(metadata$Lake == "Trout Bog Epilimnion")])
TE.agg$Taxonomy <- gsub("Acidobacteria", "Acidobacteria (2)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Actinobacteria", "Actinobacteria (8)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Alphaproteobacteria", "Alphaproteobacteria (3)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Bacteroidetes", "Bacteroidetes (3)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Betaproteobacteria", "Betaproteobacteria (7)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Chlorobi", "Chlorobi (2)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Deltaproteobacteria", "Deltaproteobacteria (1)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Gammaproteobacteria", "Gammaproteobacteria (3)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Verrucomicrobia", "Verrucomicrobia (2)", TE.agg$Taxonomy)
TE.heatmap <- ggplot(data = TE.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#a6cee3", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 8, base_aspect_ratio = 0.65)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 8, base_aspect_ratio = 0.6)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.6)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.65)
TH.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Trout Bog Hypolimnion")])) == F)]
TH.MAGs$Pathways <- make.unique(table$Pathway)
TH.long <- melt(TH.MAGs)
TH.long$Pathways <- factor(TH.long$Pathways, levels = table$Pathway)
TH.long$variable <- factor(TH.long$variable, levels = colnames(table))
TH.long$Taxonomy <- phylum[match(TH.long$variable, metadata$IMG_OID)]
TH.long$Taxonomy[which(TH.long$Taxonomy == "[Blank]")] <- "Unclassified"
TH.long <- TH.long[which(is.na(TH.long$Pathways) == F), ]
TH.agg <- aggregate(value ~ Pathways + Taxonomy, TH.long, mean)
TH.agg$value[which(TH.agg$Pathways == "Dissimilatory sulfate reduction" & TH.agg$Taxonomy == "Chlorobi")] <- 0
TH.agg$value[which(TH.agg$Pathways == "Calvin Cycle" & TH.agg$Taxonomy == "Chlorobi")] <- 0
table(phylum[which(metadata$Lake == "Trout Bog Hypolimnion")])
TH.agg$Taxonomy <- gsub("Unclassified", "Unclassified (5)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Acidobacteria", "Acidobacteria (3)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Actinobacteria", "Actinobacteria (8)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Alphaproteobacteria", "Alphaproteobacteria (3)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Bacteroidetes", "Bacteroidetes (9)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Betaproteobacteria", "Betaproteobacteria (13)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Chlorobi", "Chlorobi (2)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Deltaproteobacteria", "Deltaproteobacteria (4)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Epsilonproteobacteria", "Epsilonproteobacteria (1)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Gammaproteobacteria", "Gammaproteobacteria (5)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Ignavibacteria", "Ignavibacteria (2)", TH.agg$Taxonomy)
TH.agg$Taxonomy <- gsub("Verrucomicrobia", "Verrucomicrobia (8)", TH.agg$Taxonomy)
TH.heatmap <- ggplot(data = TH.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#8856a7", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TH.heatmap.pdf", TH.heatmap, base_height = 8, base_aspect_ratio = .7)
TE.MAGs <- table[,which(is.na(match(colnames(table), metadata$IMG_OID[which(metadata$Lake == "Trout Bog Epilimnion")])) == F)]
TE.MAGs$Pathways <- make.unique(table$Pathway)
TE.long <- melt(TE.MAGs)
TE.long$Pathways <- factor(TE.long$Pathways, levels = table$Pathway)
TE.long$variable <- factor(TE.long$variable, levels = colnames(table))
TE.long$Taxonomy <- phylum[match(TE.long$variable, metadata$IMG_OID)]
TE.long$Taxonomy[which(TE.long$Taxonomy == "[Blank]")] <- "Unclassified"
TE.long <- TE.long[which(is.na(TE.long$Pathways) == F), ]
TE.agg <- aggregate(value ~ Pathways + Taxonomy, TE.long, mean)
# Chlorobi has homologs for these pathways, but likely not the actual pathways
# The RuBisCO homolog is not involved in CBB based on other isolates
# The dissimilatory sulfate reductase works in reverse to run photosynthesis in Chlorobi
TE.agg$value[which(TE.agg$Pathways == "Calvin Cycle" & TE.agg$Taxonomy == "Chlorobi")] <- 0
TE.agg$value[which(TE.agg$Pathways == "Dissimilatory sulfate reduction" & TE.agg$Taxonomy == "Chlorobi")] <- 0
table(phylum[which(metadata$Lake == "Trout Bog Epilimnion")])
TE.agg$Taxonomy <- gsub("Acidobacteria", "Acidobacteria (2)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Actinobacteria", "Actinobacteria (8)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Alphaproteobacteria", "Alphaproteobacteria (3)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Bacteroidetes", "Bacteroidetes (3)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Betaproteobacteria", "Betaproteobacteria (7)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Chlorobi", "Chlorobi (2)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Deltaproteobacteria", "Deltaproteobacteria (1)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Gammaproteobacteria", "Gammaproteobacteria (3)", TE.agg$Taxonomy)
TE.agg$Taxonomy <- gsub("Verrucomicrobia", "Verrucomicrobia (2)", TE.agg$Taxonomy)
TE.heatmap <- ggplot(data = TE.agg, aes(y = Pathways, x = Taxonomy, fill = value)) + geom_tile(color = "black") + labs(x = "", y = "") + scale_fill_gradient2(low = "white", high = "#a6cee3", midpoint = 25) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), axis.text.y = element_text(size = 10))
TE.heatmap
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.65)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.7)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.67)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.68)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 7.5, base_aspect_ratio = 0.69)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/TE.heatmap.pdf", TE.heatmap, base_height = 8, base_aspect_ratio = 0.65)
mag_data <- read.csv("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Supplemental/MAG_information.csv", header = T)
mag_data$Taxonomy <- as.character(mag_data$Taxonomy)
mag_data$Lake <- as.character(mag_data$Lake)
# Set up data frame to store results
gh_df <- mag_data[,c(1,3,4,10)]
gh_density <- c()
gh_diversity <- c()
tophit <- c()
tophit_counts <- c()
endoglucanase <- c()
nag <- c()
glycosylase <- c()
other <- c()
# Read in each MAG's CAZy results and store GH information
for(i in 1:dim(mag_data)[1]){
datafile <- read.table(paste("C:/Users/Goose and Gander/Desktop/MAGstravaganza/dbCAN_results/", mag_data$IMG_OID[i], ".txt", sep = ""))
hits <- sub(".hmm", "", datafile$V2)
types <- substr(hits, start = 1, stop = 2)
gh_hits <- hits[which(types == "GH")]
gh_density[i] <- length(gh_hits)/mag_data$Gene_Count[i]*100
gh_diversity[i] <- length(unique(gh_hits))
gh_counts <- table(gh_hits)
tophit[i] <- names(gh_counts)[which(gh_counts == max(gh_counts))]
tophit_counts[i] <- as.numeric(gh_counts[which(gh_counts == max(gh_counts))])
endoglucanase[i] <- length(which(hits == "GH74"))
nag[i] <- length(which(hits == "GH109"))
glycosylase[i] <- length(which(hits == "GH23"))
other[i] <- length(which(hits != "GH23" & hits != "GH109" & hits != "GH74"))
}
gh_df$Diversity <- gh_diversity
gh_df$Density <- gh_density
gh_df$TopGHHit <- tophit
gh_df$TopGHHit_Count <- tophit_counts
enzymes <- c(rep("GH74", length(endoglucanase)), rep("GH109", length(nag)), rep("GH23", length(glycosylase)), rep("other", length(other)))
enzyme_counts <- c(endoglucanase, nag, glycosylase, other)
mags <- rep(gh_df$IMG_OID, 4)
gh_profiles <- data.frame(mags, enzymes, enzyme_counts)
gh_profiles$Lake <- gh_df$Lake[match(gh_profiles$mags, gh_df$IMG_OID)]
gh_df$Order <- sapply(strsplit(mag_data$Taxonomy, ";"), "[", 3)
gh_profiles$Order <- gh_df$Order[match(gh_profiles$mags, gh_df$IMG_OID)]
gh_df$Order <- factor(gh_df$Order, levels = rev(c("Actinomycetales", "Chlamydiales", "Cytophagales", "Mycoplasmatales", "Planctomycetales", "Puniceicoccales", "Rhodocyclales", "Sphingomonadales", "Xanthomonadales", "Solibacterales", "Bdellovibrionales", "Chlorobiales", "Holophagales", "Rickettsiales", "Bacteroidales", "Campylobacterales", "Desulfobacterales", "Desulfuromonadales", "Gallionellales", "Ignavibacteriales", "Legionellales", "Nitrosomonadales", "Pseudomonadales", "Rhizobiales", "Solirubrobacterales", "Flavobacteriales", "Acidimicrobiales", "Burkholderiales", "Methylococcales", "Methylophilales", "Sphingobacteriales", "Verrucomicrobiales")))
# Output data at this stage for supplemental file
write.csv(gh_df, file = "C:/Users/Goose and Gander/Desktop/MAGstravaganza/Supplemental/dbCANN_results.csv", quote = F, row.names = F)
# Plot the heatmap
gh.agg <- aggregate(Density ~ Lake + Order, data = gh_df, mean)
gh_density_plot <- ggplot(data = gh.agg[which(gh.agg$Order != "[Blank]" & is.na(gh.agg$Order) == F), ], aes(x = Lake, y = Order, fill = Density)) + geom_tile(color = "black") + scale_fill_gradient2(low = "white", mid = "#8c96c6", high = "#810f7c", midpoint = 4) + labs(x = "", y = "") + background_grid(major = "xy") + theme(axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/Fig4_panelA.pdf", gh_density_plot, base_height = 5, base_aspect_ratio = 0.7)
# Correlation of density and diversity
cor.test(gh_df$Gene_Count, gh_df$Density)
# Plot GH profile for high density groups by lake
panelB_data <- aggregate(enzyme_counts ~ Lake + Order + enzymes, data = gh_profiles, sum)
ME_plot <- panelB_data[which(panelB_data$Order == "Cytophagales" | panelB_data$Order == "Mycoplasmatales" | panelB_data$Order == "Planctomycetales" | panelB_data$Order == "Puniceicoccales" | panelB_data$Order == "Flavobacteriales" | panelB_data$Order == "Sphingobacteriales" | panelB_data$Order == "Verrucomicrobiales"), ]
ME_plot <- ME_plot[which(ME_plot$Lake == "Mendota"), ]
ME_plot$Order <- factor(ME_plot$Order, levels = rev(c("Cytophagales", "Mycoplasmatales", "Planctomycetales", "Puniceicoccales", "Flavobacteriales", "Sphingobacteriales", "Verrucomicrobiales")))
panelB <- ggplot(ME_plot, aes(x = Order, y = enzyme_counts, fill = enzymes)) + geom_col(position = "fill") + coord_flip() + scale_fill_manual(values = c("#fb9a99", "#e31a1c", "#fdbf6f", "grey")) + labs(y = NULL, x = NULL, title = "Mendota")
part2_legend <- get_legend(panelB)
panelB <- panelB + theme(legend.position = "none")
TBE_plot <- panelB_data[which(panelB_data$Order == "Solibacterales" | panelB_data$Order == "Sphingobacteriales" | panelB_data$Order == "Verrucomicrobiales"), ]
TBE_plot <- TBE_plot[which(TBE_plot$Lake == "Trout Bog Epilimnion"), ]
TBE_plot$Order <- factor(TBE_plot$Order, levels = rev(c("Solibacterales", "Sphingobacteriales", "Verrucomicrobiales")))
panelC <- ggplot(TBE_plot, aes(x = Order, y = enzyme_counts, fill = enzymes)) + geom_col(position = "fill") + coord_flip() + scale_fill_manual(values = c("#fb9a99", "#e31a1c", "#fdbf6f", "grey")) + labs(y = NULL, x = NULL, title = "Trout Bog Epilimnion") + theme(legend.position = "none")
TBH_plot <- panelB_data[which(panelB_data$Order == "Bacteroidales" | panelB_data$Order == "Ignavibacteriales" | panelB_data$Order == "Flavobacteriales" | panelB_data$Order == "Sphingobacteriales" | panelB_data$Order == "Verrucomicrobiales"), ]
TBH_plot <- TBH_plot[which(TBH_plot$Lake == "Trout Bog Hypolimnion"), ]
TBH_plot$Order <- factor(TBH_plot$Order, levels = rev(c("Bacteroidales", "Ignavibacteriales", "Flavobacteriales", "Sphingobacteriales", "Verrucomicrobiales")))
panelD <- ggplot(TBH_plot, aes(x = Order, y = enzyme_counts, fill = enzymes)) + geom_col(position = "fill") + coord_flip() + scale_fill_manual(values = c("#fb9a99", "#e31a1c", "#fdbf6f", "grey")) + labs(y = "GH Proportion", x = NULL, title = "Trout Bog Hypolimnion") + theme(legend.position = "none")
part2 <- plot_grid(panelB, panelC, panelD, nrow = 3, labels = c("B", "C", "D"), rel_heights = c(7, 4, 6))
# Put it all together
fig4 <- plot_grid(gh_density_plot, part2, labels = c("A", ""), ncol = 2)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/Fig4.pdf", fig3, base_height = 6, base_aspect_ratio = 1.25)
save_plot("C:/Users/Goose and Gander/Desktop/MAGstravaganza/Manuscript_plots/Fig4.pdf", fig4, base_height = 6, base_aspect_ratio = 1.25)
lake <- "Sparkling"
genome <- "2236347069"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group1 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Sparkling"
genome <- "2236661000"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group2 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
metadata <- read.csv(file = "C:/Users/Goose and Gander/Desktop/geodes/bioinformatics_workflow/R_processing/sample_metadata.csv", header = T)
read_counts <- read.csv("C:/Users/Goose and Gander/Desktop/GEODES_refMAGsSAGs_mapping/GEODES2refMAGsSAGs_normalized_readcounts.csv", header = T, row.names = 1)
genekey <- read.csv("C:/Users/Goose and Gander/Desktop/GEODES_refMAGsSAGs_mapping/GEODES2refMAGsSAGS_geneinfo.txt", header = T, row.names = 1)
colnames(read_counts) <- gsub(".nonrRNA", "", colnames(read_counts))
read_counts$GEODES014 <- NULL
read_counts$GEODES033 <- NULL
read_counts$GEODES065 <- NULL
read_counts$GEODES158 <- NULL
lake <- "Sparkling"
genome <- "2236661000"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group1 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
lake <- "Sparkling"
genome <- "2236661000"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group1 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Sparkling"
genome <- "2236661000"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group2 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
cor(group1, group2)
group1
group2
lake <- "Sparkling"
genome <- "2236347069"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group1 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
cor(group1, group2)
lakekey
lake <- "Trout"
genome <- "2236661009"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group1 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Trout"
genome <- "2236661006"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group2 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Trout"
genome <- "2236661002"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group3 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
cor(group1, group2)
cor(group1, group3)
group1
group3
cor(group2, group3)
group2
plot(group1, group2)
plot(group1, group3)
plot(group2, group3)
str(group1)
barplot(group1)
barplot(group2)
barplot(group3)
read_counts$GEODES053 <- NULL
lake <- "Trout"
genome <- "2236661002"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group3 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Trout"
genome <- "2236661006"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group2 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Trout"
genome <- "2236661009"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group1 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
cor(group1, group2)
cor(group1, group3)
cor(group2, group3)
barplot(group1)
genekey <- read.csv("C:/Users/Goose and Gander/Desktop/GEODES_refMAGsSAGs_mapping/GEODES2refMAGsSAGS_geneinfo.txt", header = T, row.names = 1)
colnames(read_counts) <- gsub(".nonrRNA", "", colnames(read_counts))
read_counts$GEODES014 <- NULL
read_counts$GEODES033 <- NULL
read_counts$GEODES065 <- NULL
read_counts$GEODES158 <- NULL
genome <- "2236661009"
lake <- "Trout"
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
#What genes are expressed?
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
genomekey$Totals <- rowSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
genomekey <- genomekey[order(genomekey$Totals, decreasing = T), ]
genomekey[1:100, ]
genomekey[grep("transport", genomekey$X3), ]
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
zscore <- function(counts){
z <- (counts - mean(counts)) / sd(counts)
return(z)
}
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
read_counts <- read.csv("C:/Users/Goose and Gander/Desktop/GEODES_refMAGsSAGs_mapping/GEODES2refMAGsSAGs_normalized_readcounts.csv", header = T, row.names = 1)
genekey <- read.csv("C:/Users/Goose and Gander/Desktop/GEODES_refMAGsSAGs_mapping/GEODES2refMAGsSAGS_geneinfo.txt", header = T, row.names = 1)
colnames(read_counts) <- gsub(".nonrRNA", "", colnames(read_counts))
read_counts$GEODES014 <- NULL
read_counts$GEODES033 <- NULL
read_counts$GEODES065 <- NULL
read_counts$GEODES158 <- NULL
genome <- "2236661009"
lake <- "Trout"
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
#What genes are expressed?
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
genomekey$Totals <- rowSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
genomekey <- genomekey[order(genomekey$Totals, decreasing = T), ]
genomekey[1:100, ]
genomekey[grep("transport", genomekey$X3), ]
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
genome <- "2236661006"
lake <- "Trout"
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
#What genes are expressed?
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
genomekey$Totals <- rowSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
genomekey <- genomekey[order(genomekey$Totals, decreasing = T), ]
genomekey[1:100, ]
genomekey[grep("transport", genomekey$X3), ]
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
genekey[grep("opsin", genekey$X3),]
genomekey[grep("opsin", genekey$X3),]
head(genomekey)
genomekey[grep("opsin", genomekey$X3),]
genome <- "2236661002"
lake <- "Trout"
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
#What genes are expressed?
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
genomekey$Totals <- rowSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
genomekey <- genomekey[order(genomekey$Totals, decreasing = T), ]
genomekey[1:100, ]
genomekey[grep("transport", genomekey$X3), ]
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
lake <- "Mendota"
genome <- "2236347069"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group1 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Mendota"
genome <- "2236876030"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group2 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
lake <- "Mendota"
genome <- "2236661000"
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
group3 <- colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
cor(group1, group2)
cor(group1, group3)
cor(group2, group3)
genome <- "2236347069"
lake <- "Mendota"
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
#What genes are expressed?
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
genomekey$Totals <- rowSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
genomekey <- genomekey[order(genomekey$Totals, decreasing = T), ]
genomekey[1:100, ]
genomekey[grep("transport", genomekey$X3), ]
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
genome <- "2236876030"
lake <- "Mendota"
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
#What genes are expressed?
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
genomekey$Totals <- rowSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
genomekey <- genomekey[order(genomekey$Totals, decreasing = T), ]
genomekey[1:100, ]
genomekey[grep("transport", genomekey$X3), ]
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
genomekey[grep("opsin", genomekey$)]
genomekey[grep("opsin", genomekey$X3),]
genome <- "2236661000"
lake <- "Mendota"
lakekey <- metadata$Lake[match(colnames(read_counts), metadata$Sample)]
#What genes are expressed?
genomekey <- genekey[which(as.character(genekey$X1) == genome), ]
genomekey$Totals <- rowSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])
genomekey <- genomekey[order(genomekey$Totals, decreasing = T), ]
genomekey[1:100, ]
genomekey[grep("transport", genomekey$X3), ]
barplot(zscore(colSums(read_counts[match(rownames(genomekey), rownames(read_counts)), which(lakekey == lake)])), las = 2)
